---
footer: "[üîó pos.it/arrow-conf23](https://pos.it/arrow-conf23)"
logo: "images/logo.png"
execute:
  echo: true
format:
  revealjs: 
    theme: default
engine: knitr
editor: source
---

# Data Manipulation---Part 1 {#data-manip-1}

```{r}
#| label: setup-data-manip
#| message: false
#| echo: false

library(arrow)
library(dplyr)
library(duckdb)
library(lubridate)
library(stringr)
```

## Goals

Avoiding these! But...don't worry!

![](images/segfault.png)


## dplyr API in arrow

![](images/dplyr-backend.png)

## An Arrow Dataset

```{r}
#| label: setup-data-manip1-2

library(arrow)

nyc_taxi <- open_dataset(here::here("data/nyc-taxi"))
nyc_taxi
```
## Arrow Datasets

![](images/nyc_taxi_dataset.png)


## Constructing queries

```{r}
#| label: shared-rides

library(dplyr)

shared_rides <- nyc_taxi |>
  group_by(year) |>
  summarize(
    all_trips = n(),
    shared_trips = sum(passenger_count > 1, na.rm = TRUE)
  ) |>
  mutate(pct_shared = shared_trips / all_trips * 100) 

class(shared_rides)
```

## arrow dplyr queries

```{r}
#| label: print-shared-rides

shared_rides
```

## arrow dplyr queries

-   query has been constructed but not evaluated
-   nothing has been pulled into memory

## To `collect()` or to `compute()`?

-   `compute()` evaluates the query, in-memory output stays in Arrow
-   `collect()` evaluates the query, in-memory output returns to R

## `compute()`

```{r}
#| label: compute

compute(shared_rides)
```

## `collect()`

```{r}
#| label: collect

collect(shared_rides)
```

## Calling `nrow()` to see how much data

```{r}
#| label: nrow

nyc_taxi |>
  filter(year %in% 2017:2021) |>
  nrow()
```

## Calling `nrow()` doesn't work with intermediate step

```{r}
#| label: nrow-intermed

nyc_taxi |>
  filter(year %in% 2017:2021) |>
  group_by(year) |>
  summarize(
    all_trips = n(),
    shared_trips = sum(passenger_count > 1, na.rm = TRUE)
  ) |>
  mutate(pct_shared = shared_trips / all_trips * 100) |>
  nrow()
```

## Use `compute()` to execute intermediate steps

```{r,`code-line-numbers`="9"}
#| label: compute-intermed

nyc_taxi |>
  filter(year %in% 2017:2021) |>
  group_by(year) |>
  summarize(
    all_trips = n(),
    shared_trips = sum(passenger_count > 1, na.rm = TRUE)
  ) |>
  mutate(pct_shared = shared_trips / all_trips * 100) |>
  compute() |>
  nrow()
```

## Your Turn

Use the function `nrow()` to work out the answers to these questions:

1.  How many taxi fares in the dataset had a total amount greater than \$100?

2.  How many distinct pickup locations (distinct combinations of the `pickup_latitude` and `pickup_longitude` columns) are in the dataset since 2016? 

‚û°Ô∏è [Data Manipulation Part I Exercises Page](2_data_manipulation_1-exercises.html)


## Previewing output for large queries

How much were fares in GBP (¬£)?

```{r}
#| label: fares-gbp

fares_pounds <- nyc_taxi |>
  mutate(
    fare_amount_pounds = fare_amount * 0.79
  )
```

How many rows?

```{r}
#| label: fares-pounds

fares_pounds |>
  nrow()
```

## Use `head()`, `select()`, `filter()`, and `collect()` to preview results

```{r}
#| label: fares-gbp-head
nyc_taxi |>
  filter(year == 2020) |>
  mutate(fare_pounds = fare_amount * 0.79) |>
  select(fare_amount, fare_pounds) |>
  head() |>
  collect()
```

## Use `across()` to transform data in multiple columns

```{r}
#| label: across

taxis_gbp <- nyc_taxi |>
  mutate(across(ends_with("amount"), list(pounds = ~.x * 0.79)))

taxis_gbp
```

## Use `across()` to transform data in multiple columns

```{r}
#| label: across-2

taxis_gbp |>
  select(contains("amount")) |>
  head() |>
  collect()
```

## Summary

-   Use `nrow()` to work out how many rows of data your analyses will return
-   Use `compute()` when you need to execute intermediate steps
-   Use `collect()` to pull all of the data into your R session
-   Use `head()`, `select()`, `filter()`, and `collect()` to preview results
-   Use `across()` to manipulate data in multiple columns at once

# dplyr verbs API in arrow - alternatives

## Example - `slice()`

First three trips in the dataset in 2021 where distance \> 100 miles

```{r}
#| label: no-slice
#| error: true

long_rides_2021 <- nyc_taxi |>
  filter(year == 2021 & trip_distance > 100) |>
  select(pickup_datetime, year, trip_distance)

long_rides_2021 |>
  slice(1:3)
```

## Head to the docs!

```{r}
#| label: get-help

?`arrow-dplyr`
```

or view them at <https://arrow.apache.org/docs/r/reference/acero.html>

## A different function

```{r}
#| label: slice-max

long_rides_2021 |>
  slice_max(n = 3, order_by = trip_distance, with_ties = FALSE) |>
  collect()
```

## Or call `collect()` first

```{r}
#| label: collect-first

long_rides_2021 |>
  collect() |>
  slice(1:3)
```

## tidyr functions - pivot

```{r}
#| label: pivot-fails
#| error: true

library(tidyr)

nyc_taxi |> 
  group_by(vendor_name) |>
  summarise(max_fare = max(fare_amount)) |>
  pivot_longer(!vendor_name, names_to = "metric") |> 
  collect()
```

## duckdb

![](images/dplyr-arrow-duckdb.png)

## tidyr functions - pivot with duckdb!

```{r}
#| label: pivot-duckdb

library(duckdb)

nyc_taxi |> 
  group_by(vendor_name) |>
  summarise(max_fare = max(fare_amount)) |>
  to_duckdb() |> # send data to duckdb
  pivot_longer(!vendor_name, names_to = "metric") |> 
  to_arrow() |> # return data back to arrow
  collect()
```

::: {.callout-caution collapse="true"}
## Requires arrow 13.0.0

This code requires arrow 13.0.0 or above to run, due to a bugfix in this version
:::

# Using functions inside verbs

## Using functions inside verbs

-   lots of the [lubridate](https://lubridate.tidyverse.org/) and [stringr](https://stringr.tidyverse.org/) APIs supported!
-   base R and others too - always good to check the docs

## Morning vs afternoon with namespacing

```{r, `code-line-numbers`="3"}
#| label: namespacing

nyc_taxi |>
  group_by(
    time_of_day = ifelse(lubridate::am(pickup_datetime), "morning", "afternoon")
  ) |>
  count() |>
  collect()
```

## Morning vs afternoon - without namespacing

```{r, `code-line-numbers`="5"}
#| label: no-namespacing

library(lubridate)

nyc_taxi |>
  group_by(
    time_of_day = ifelse(am(pickup_datetime), "morning", "afternoon")
  ) |>
  count() |>
  collect()
```

## What if a function isn't implemented?

```{r}
#| label: na_if_errors
#| error: true
nyc_taxi |>
  mutate(vendor_name = na_if(vendor_name, "CMT")) |>
  head() |>
  collect()
```

## Head to the docs again to see what's implemented!

```{r}
#| label: get-help-funcs

?`arrow-dplyr`
```

or view them at <https://arrow.apache.org/docs/r/reference/acero.html>

## Option 1 - find a workaround!

```{r}
#| label: na_if_workaround
nyc_taxi |>
  mutate(vendor_name = ifelse(vendor_name == "CMT", NA, vendor_name)) |>
  head() |>
  collect()
```

## Option 2

-   In data manipulation part 2!

## Your Turn

1.  Use the `dplyr::filter()` and `stringr::str_ends()` functions to return a subset of the data which is a) from September 2020, and b) the value in `vendor_name` ends with the letter "S".

2.  Try to use the `stringr` function `str_replace_na()` to replace any `NA` values in the `vendor_name` column with the string "No vendor" instead. What happens, and why?

3.  Bonus question: see if you can find a different way of completing the task in question 2.

‚û°Ô∏è [Data Manipulation Part I Exercises Page](2_data_manipulation_1-exercises.html)

## Summary


-   Working with Arrow Datasets allow you to manipulate data which is larger-than-memory
-   You can use many dplyr functions with arrow - run `` ?`arrow-dplyr` `` to view the docs
-   You can pass data to duckdb to use functions implemented in duckdb but not arrow
