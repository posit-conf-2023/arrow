{
  "hash": "5bad4fd5c326268679516718076cfbbe",
  "result": {
    "markdown": "---\nfooter: \"[ðŸ”— pos.it/arrow-conf23](https://pos.it/arrow-conf23)\"\nlogo: \"images/logo.png\"\nexecute:\n  echo: true\nformat:\n  revealjs: \n    theme: default\nengine: knitr\neditor: source\n---\n\n\n# Wrapping Up: 'Big' Data Analysis Pipelines with R {#wrapping-up}\n\n## Arrow\n\n-   efficiently read + filter + join + summarise 1.15 billion rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(arrow)\nlibrary(dplyr)\nlibrary(janitor)\nlibrary(stringr)\n\nnyc_taxi_zones <- read_csv_arrow(here::here(\"data/taxi_zone_lookup.csv\"),\n                                 as_data_frame = FALSE) |>\n  clean_names()\n  \nairport_zones <- nyc_taxi_zones |>\n  filter(str_detect(zone, \"Airport\")) |>\n  pull(location_id, as_vector = TRUE)\n\ndropoff_zones <- nyc_taxi_zones |>\n  select(dropoff_location_id = location_id,\n         dropoff_zone = zone) |> \n  compute()\n\nairport_pickups <- open_dataset(here::here(\"data/nyc-taxi\")) |>\n  filter(pickup_location_id %in% airport_zones) |>\n  select(\n    matches(\"datetime\"),\n    matches(\"location_id\")\n  ) |>\n  left_join(dropoff_zones) |>\n  count(dropoff_zone) |>\n  arrange(desc(n)) |>\n  collect()\n```\n:::\n\n\n## R\n\n-   read + wrangle spatial data + ðŸ¤© graphics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(stringr)\nlibrary(scales)\n\nmap <- read_sf(here::here(\"data/taxi_zones/taxi_zones.shp\")) |>\n  clean_names() |>\n  left_join(airport_pickups,\n            by = c(\"zone\" = \"dropoff_zone\")) |>\n  arrange(desc(n))\n\narrow_r_together <- ggplot(data = map, aes(fill = n)) +\n  geom_sf(size = .1) +\n  scale_fill_distiller(\n    name = \"Number of trips\",\n    labels = label_comma(),\n    palette = \"Reds\",\n    direction = 1\n  ) +\n  geom_label_repel(\n    stat = \"sf_coordinates\",\n    data = map |>\n      mutate(zone_label = case_when(\n        str_detect(zone, \"Airport\") ~ zone,\n        str_detect(zone, \"Times\") ~ zone,\n        .default = \"\"\n      )),\n    mapping = aes(label = zone_label, geometry = geometry),\n    max.overlaps = 60,\n    label.padding = .3,\n    fill = \"white\"\n  ) +\n  theme_void()\n```\n:::\n\n\n## Arrow + R Together: {arrow}\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrow_r_together\n```\n\n::: {.cell-output-display}\n![](6_wrapping_up_files/figure-revealjs/arrow_r_together-1.png){width=960}\n:::\n:::\n",
    "supporting": [
      "6_wrapping_up_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}