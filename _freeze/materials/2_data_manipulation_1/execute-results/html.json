{
  "hash": "792b0b18d06798448201d3ded670c0df",
  "result": {
    "markdown": "---\nfooter: \"[üîó pos.it/arrow-conf23](https://pos.it/arrow-conf23)\"\nlogo: \"images/logo.png\"\nexecute:\n  echo: true\nformat:\n  revealjs: \n    theme: default\nengine: knitr\neditor: source\n---\n\n\n# Data Manipulation---Part 1 {#data-manip-1}\n\n\n::: {.cell}\n\n:::\n\n\n## Goals\n\nAvoiding these! But...don't worry!\n\n![](images/segfault.png)\n\n\n## dplyr API in arrow\n\n![](images/dplyr-backend.png)\n\n## An Arrow Dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(arrow)\n\nnyc_taxi <- open_dataset(here::here(\"data/nyc-taxi\"))\nnyc_taxi\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFileSystemDataset with 120 Parquet files\nvendor_name: string\npickup_datetime: timestamp[ms]\ndropoff_datetime: timestamp[ms]\npassenger_count: int64\ntrip_distance: double\npickup_longitude: double\npickup_latitude: double\nrate_code: string\nstore_and_fwd: string\ndropoff_longitude: double\ndropoff_latitude: double\npayment_type: string\nfare_amount: double\nextra: double\nmta_tax: double\ntip_amount: double\ntolls_amount: double\ntotal_amount: double\nimprovement_surcharge: double\ncongestion_surcharge: double\npickup_location_id: int64\ndropoff_location_id: int64\nyear: int32\nmonth: int32\n```\n:::\n:::\n\n## Arrow Datasets\n\n![](images/nyc_taxi_dataset.png)\n\n\n## Constructing queries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\nshared_rides <- nyc_taxi |>\n  group_by(year) |>\n  summarize(\n    all_trips = n(),\n    shared_trips = sum(passenger_count > 1, na.rm = TRUE)\n  ) |>\n  mutate(pct_shared = shared_trips / all_trips * 100) \n\nclass(shared_rides)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"arrow_dplyr_query\"\n```\n:::\n:::\n\n\n## arrow dplyr queries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshared_rides\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFileSystemDataset (query)\nyear: int32\nall_trips: int64\nshared_trips: uint64\npct_shared: double (multiply_checked(divide(cast(shared_trips, {to_type=double, allow_int_overflow=false, allow_time_truncate=false, allow_time_overflow=false, allow_decimal_truncate=false, allow_float_truncate=false, allow_invalid_utf8=false}), cast(all_trips, {to_type=double, allow_int_overflow=false, allow_time_truncate=false, allow_time_overflow=false, allow_decimal_truncate=false, allow_float_truncate=false, allow_invalid_utf8=false})), 100))\n\nSee $.data for the source Arrow object\n```\n:::\n:::\n\n\n## arrow dplyr queries\n\n-   query has been constructed but not evaluated\n-   nothing has been pulled into memory\n\n## To `collect()` or to `compute()`?\n\n-   `compute()` evaluates the query, in-memory output stays in Arrow\n-   `collect()` evaluates the query, in-memory output returns to R\n\n## `compute()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompute(shared_rides)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTable\n10 rows x 4 columns\n$year <int32>\n$all_trips <int64>\n$shared_trips <uint64>\n$pct_shared <double>\n```\n:::\n:::\n\n\n## `collect()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect(shared_rides)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 √ó 4\n    year all_trips shared_trips pct_shared\n   <int>     <int>        <int>      <dbl>\n 1  2012 178544324     53313752       29.9\n 2  2013 173179759     51215013       29.6\n 3  2014 165114361     48816505       29.6\n 4  2015 146112989     43081091       29.5\n 5  2016 131165043     38163870       29.1\n 6  2017 113495512     32296166       28.5\n 7  2018 102797401     28796633       28.0\n 8  2019  84393604     23515989       27.9\n 9  2020  24647055      5837960       23.7\n10  2021  30902618      7221844       23.4\n```\n:::\n:::\n\n\n## Calling `nrow()` to see how much data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnyc_taxi |>\n  filter(year %in% 2017:2021) |>\n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 356236190\n```\n:::\n:::\n\n\n## Calling `nrow()` doesn't work with intermediate step\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnyc_taxi |>\n  filter(year %in% 2017:2021) |>\n  group_by(year) |>\n  summarize(\n    all_trips = n(),\n    shared_trips = sum(passenger_count > 1, na.rm = TRUE)\n  ) |>\n  mutate(pct_shared = shared_trips / all_trips * 100) |>\n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\n## Use `compute()` to execute intermediate steps\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"9\"}\nnyc_taxi |>\n  filter(year %in% 2017:2021) |>\n  group_by(year) |>\n  summarize(\n    all_trips = n(),\n    shared_trips = sum(passenger_count > 1, na.rm = TRUE)\n  ) |>\n  mutate(pct_shared = shared_trips / all_trips * 100) |>\n  compute() |>\n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\n## Your Turn\n\nUse the function `nrow()` to work out the answers to these questions:\n\n1.  How many taxi fares in the dataset had a total amount greater than \\$100?\n\n2.  How many distinct pickup locations (distinct combinations of the `pickup_latitude` and `pickup_longitude` columns) are in the dataset since 2016? \n\n‚û°Ô∏è [Data Manipulation Part I Exercises Page](2_data_manipulation_1-exercises.html)\n\n\n## Previewing output for large queries\n\nHow much were fares in GBP (¬£)?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfares_pounds <- nyc_taxi |>\n  mutate(\n    fare_amount_pounds = fare_amount * 0.79\n  )\n```\n:::\n\n\nHow many rows?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfares_pounds |>\n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1150352666\n```\n:::\n:::\n\n\n## Use `head()`, `select()`, `filter()`, and `collect()` to preview results\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnyc_taxi |>\n  filter(year == 2020) |>\n  mutate(fare_pounds = fare_amount * 0.79) |>\n  select(fare_amount, fare_pounds) |>\n  head() |>\n  collect()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 2\n  fare_amount fare_pounds\n        <dbl>       <dbl>\n1        16.5       13.0 \n2        21.5       17.0 \n3         5          3.95\n4        10.5        8.30\n5        11          8.69\n6         5.5        4.35\n```\n:::\n:::\n\n\n## Use `across()` to transform data in multiple columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxis_gbp <- nyc_taxi |>\n  mutate(across(ends_with(\"amount\"), list(pounds = ~.x * 0.79)))\n\ntaxis_gbp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFileSystemDataset (query)\nvendor_name: string\npickup_datetime: timestamp[ms]\ndropoff_datetime: timestamp[ms]\npassenger_count: int64\ntrip_distance: double\npickup_longitude: double\npickup_latitude: double\nrate_code: string\nstore_and_fwd: string\ndropoff_longitude: double\ndropoff_latitude: double\npayment_type: string\nfare_amount: double\nextra: double\nmta_tax: double\ntip_amount: double\ntolls_amount: double\ntotal_amount: double\nimprovement_surcharge: double\ncongestion_surcharge: double\npickup_location_id: int64\ndropoff_location_id: int64\nyear: int32\nmonth: int32\nfare_amount_pounds: double (multiply_checked(fare_amount, 0.79))\ntip_amount_pounds: double (multiply_checked(tip_amount, 0.79))\ntolls_amount_pounds: double (multiply_checked(tolls_amount, 0.79))\ntotal_amount_pounds: double (multiply_checked(total_amount, 0.79))\n\nSee $.data for the source Arrow object\n```\n:::\n:::\n\n\n## Use `across()` to transform data in multiple columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxis_gbp |>\n  select(contains(\"amount\")) |>\n  head() |>\n  collect()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 8\n  fare_amount tip_amount tolls_amount total_amount fare_amount_pounds\n        <dbl>      <dbl>        <dbl>        <dbl>              <dbl>\n1         6.1       2               0          8.6               4.82\n2         5.3       0               0          5.8               4.19\n3         9.7       2               0         12.2               7.66\n4         8.1       0               0          8.6               6.40\n5         5.7       2               0          8.2               4.50\n6        24.5       6.37            0         31.9              19.4 \n# ‚Ñπ 3 more variables: tip_amount_pounds <dbl>, tolls_amount_pounds <dbl>,\n#   total_amount_pounds <dbl>\n```\n:::\n:::\n\n\n## Summary\n\n-   Use `nrow()` to work out how many rows of data your analyses will return\n-   Use `compute()` when you need to execute intermediate steps\n-   Use `collect()` to pull all of the data into your R session\n-   Use `head()`, `select()`, `filter()`, and `collect()` to preview results\n-   Use `across()` to manipulate data in multiple columns at once\n\n# dplyr verbs API in arrow - alternatives\n\n## Example - `slice()`\n\nFirst three trips in the dataset in 2021 where distance \\> 100 miles\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlong_rides_2021 <- nyc_taxi |>\n  filter(year == 2021 & trip_distance > 100) |>\n  select(pickup_datetime, year, trip_distance)\n\nlong_rides_2021 |>\n  slice(1:3)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in UseMethod(\"slice\"): no applicable method for 'slice' applied to an object of class \"arrow_dplyr_query\"\n```\n:::\n:::\n\n\n## Head to the docs!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?`arrow-dplyr`\n```\n:::\n\n\nor view them at <https://arrow.apache.org/docs/r/reference/acero.html>\n\n## A different function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlong_rides_2021 |>\n  slice_max(n = 3, order_by = trip_distance, with_ties = FALSE) |>\n  collect()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 √ó 3\n  pickup_datetime      year trip_distance\n  <dttm>              <int>         <dbl>\n1 2021-11-16 06:55:00  2021       351613.\n2 2021-10-27 11:46:00  2021       345124.\n3 2021-12-11 04:48:00  2021       335094.\n```\n:::\n:::\n\n\n## Or call `collect()` first\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlong_rides_2021 |>\n  collect() |>\n  slice(1:3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 √ó 3\n  pickup_datetime      year trip_distance\n  <dttm>              <int>         <dbl>\n1 2021-10-02 09:04:53  2021          188.\n2 2021-11-01 06:14:03  2021          381.\n3 2021-12-01 11:48:04  2021          110.\n```\n:::\n:::\n\n\n## tidyr functions - pivot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\n\nnyc_taxi |> \n  group_by(vendor_name) |>\n  summarise(max_fare = max(fare_amount)) |>\n  pivot_longer(!vendor_name, names_to = \"metric\") |> \n  collect()\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in UseMethod(\"pivot_longer\"): no applicable method for 'pivot_longer' applied to an object of class \"arrow_dplyr_query\"\n```\n:::\n:::\n\n\n## duckdb\n\n![](images/dplyr-arrow-duckdb.png)\n\n## tidyr functions - pivot with duckdb!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(duckdb)\n\nnyc_taxi |> \n  group_by(vendor_name) |>\n  summarise(max_fare = max(fare_amount)) |>\n  to_duckdb() |> # send data to duckdb\n  pivot_longer(!vendor_name, names_to = \"metric\") |> \n  to_arrow() |> # return data back to arrow\n  collect()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 √ó 3\n  vendor_name metric     value\n  <chr>       <chr>      <dbl>\n1 CMT         max_fare 998310.\n2 VTS         max_fare  10000.\n3 <NA>        max_fare   3555.\n```\n:::\n:::\n\n\n::: {.callout-caution collapse=\"true\"}\n## Requires arrow 13.0.0\n\nThis code requires arrow 13.0.0 or above to run, due to a bugfix in this version\n:::\n\n# Using functions inside verbs\n\n## Using functions inside verbs\n\n-   lots of the [lubridate](https://lubridate.tidyverse.org/) and [stringr](https://stringr.tidyverse.org/) APIs supported!\n-   base R and others too - always good to check the docs\n\n## Morning vs afternoon with namespacing\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nnyc_taxi |>\n  group_by(\n    time_of_day = ifelse(lubridate::am(pickup_datetime), \"morning\", \"afternoon\")\n  ) |>\n  count() |>\n  collect()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 √ó 2\n# Groups:   time_of_day [2]\n  time_of_day         n\n  <chr>           <int>\n1 morning     413860990\n2 afternoon   736491676\n```\n:::\n:::\n\n\n## Morning vs afternoon - without namespacing\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\nlibrary(lubridate)\n\nnyc_taxi |>\n  group_by(\n    time_of_day = ifelse(am(pickup_datetime), \"morning\", \"afternoon\")\n  ) |>\n  count() |>\n  collect()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 √ó 2\n# Groups:   time_of_day [2]\n  time_of_day         n\n  <chr>           <int>\n1 afternoon   736491676\n2 morning     413860990\n```\n:::\n:::\n\n\n## What if a function isn't implemented?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnyc_taxi |>\n  mutate(vendor_name = na_if(vendor_name, \"CMT\")) |>\n  head() |>\n  collect()\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: Expression na_if(vendor_name, \"CMT\") not supported in Arrow\nCall collect() first to pull data into R.\n```\n:::\n:::\n\n\n## Head to the docs again to see what's implemented!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?`arrow-dplyr`\n```\n:::\n\n\nor view them at <https://arrow.apache.org/docs/r/reference/acero.html>\n\n## Option 1 - find a workaround!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnyc_taxi |>\n  mutate(vendor_name = ifelse(vendor_name == \"CMT\", NA, vendor_name)) |>\n  head() |>\n  collect()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 24\n  vendor_name pickup_datetime     dropoff_datetime    passenger_count\n  <chr>       <dttm>              <dttm>                        <int>\n1 <NA>        2012-01-20 04:32:03 2012-01-20 04:37:47               1\n2 <NA>        2012-01-20 04:33:16 2012-01-20 04:39:24               2\n3 <NA>        2012-01-20 04:32:38 2012-01-20 04:48:12               1\n4 <NA>        2012-01-20 04:31:23 2012-01-20 04:43:28               1\n5 <NA>        2012-01-20 04:32:38 2012-01-20 04:39:41               1\n6 <NA>        2012-01-11 21:44:00 2012-01-11 22:15:00               2\n# ‚Ñπ 20 more variables: trip_distance <dbl>, pickup_longitude <dbl>,\n#   pickup_latitude <dbl>, rate_code <chr>, store_and_fwd <chr>,\n#   dropoff_longitude <dbl>, dropoff_latitude <dbl>, payment_type <chr>,\n#   fare_amount <dbl>, extra <dbl>, mta_tax <dbl>, tip_amount <dbl>,\n#   tolls_amount <dbl>, total_amount <dbl>, improvement_surcharge <dbl>,\n#   congestion_surcharge <dbl>, pickup_location_id <int>,\n#   dropoff_location_id <int>, year <int>, month <int>\n```\n:::\n:::\n\n\n## Option 2\n\n-   In data manipulation part 2!\n\n## Your Turn\n\n1.  Use the `dplyr::filter()` and `stringr::str_ends()` functions to return a subset of the data which is a) from September 2020, and b) the value in `vendor_name` ends with the letter \"S\".\n\n2.  Try to use the `stringr` function `str_replace_na()` to replace any `NA` values in the `vendor_name` column with the string \"No vendor\" instead. What happens, and why?\n\n3.  Bonus question: see if you can find a different way of completing the task in question 2.\n\n‚û°Ô∏è [Data Manipulation Part I Exercises Page](2_data_manipulation_1-exercises.html)\n\n## Summary\n\n\n-   Working with Arrow Datasets allow you to manipulate data which is larger-than-memory\n-   You can use many dplyr functions with arrow - run `` ?`arrow-dplyr` `` to view the docs\n-   You can pass data to duckdb to use functions implemented in duckdb but not arrow\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}